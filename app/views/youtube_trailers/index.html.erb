<div class="container">
  <h1>YouTube Trailer Scraper</h1>
  <%= form_with url: fetch_youtube_trailers_youtube_trailers_path, method: :post, multipart: true, class: "form-container" do |form| %>
    <div class="form-group">
      <%= form.label :file, "Upload CSV file", class: "form-label" %>
      <%= form.file_field :file, class: "form-input" %>
    </div>
    <div class="form-actions">
      <%= form.submit "Scrape YouTube Data", class: "submit-btn", id: "scrape-button" %>
    </div>
  <% end %>

  <!-- Progress bar for scraping process -->
  <div class="progress-bar-container" id="progress-bar-container" style="display: none;">
    <div class="progress-bar" id="progress-bar">0%</div>
  </div>

  <!-- Button to expand/collapse video list, hidden initially -->
  <button id="expand-collapse-button" style="display: none;" class="expand-collapse-btn">Expand All</button>

  <!-- Container for video list -->
  <div id="video-list-container" class="video-list-container" style="display: none;">
    <!-- Video list content will be loaded here -->
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const scrapeButton = document.getElementById("scrape-button");
      const progressBarContainer = document.getElementById("progress-bar-container");
      const progressBar = document.getElementById("progress-bar");
      const expandCollapseButton = document.getElementById("expand-collapse-button");
      const videoListContainer = document.getElementById("video-list-container");

      scrapeButton.addEventListener("click", function(event) {
        event.preventDefault(); // Prevent form submission to enable real-time progress

        progressBarContainer.style.display = "block";
        progressBar.style.width = "0%";
        progressBar.textContent = "0%";

        fetchProgress(); // Start checking the progress

        document.querySelector("form").submit(); // Submit the form after starting progress tracking
      });

      let lastReportedProgress = 0;

      function fetchProgress() {
        fetch("<%= progress_youtube_trailers_path %>")
          .then(response => response.json())
          .then(data => {
            const current = data.current || 0;
            const total = data.total || 1;
            const percentage = Math.floor((current / total) * 100);

            if (percentage > lastReportedProgress) {
              lastReportedProgress = percentage; // Update the last reported progress
              progressBar.style.width = `${percentage}%`;
              progressBar.textContent = `${percentage}%`;
            }

            if (percentage < 100) {
              const nextInterval = percentage < 50 ? 2000 : 5000; // Increase interval as progress increases
              setTimeout(fetchProgress, nextInterval);
            } else {
              // Show the expand/collapse button when scraping is complete
              expandCollapseButton.style.display = "block";
              loadVideoList(); // Load video list after scraping completes
            }
          })
          .catch(error => console.error("Error fetching progress:", error));
      }

      // Function to load the video list into the container
      function loadVideoList() {
        const todayDate = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
        const jsonUrl = `/${todayDate}-Batch/youtube_data.json`;

        fetch(jsonUrl)
          .then(response => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then(data => {
            videoListContainer.innerHTML = data.map(video => `
              <div class="video-item">
                <video controls class="video-player">
                  <source src="${video.video_url}" type="video/mp4">
                  Your browser does not support the video tag.
                </video>
                <div class="video-info">
                  <h3 class="video-title">${video.title_content}</h3>
                  <p class="video-description">${video.description_content}</p>
                </div>
              </div>
            `).join('');
            videoListContainer.style.display = "none";
          })
          .catch(error => console.error("Error loading video list:", error));
      }

      // Toggle expand/collapse of video list
      expandCollapseButton.addEventListener("click", function() {
        if (videoListContainer.style.display === "none") {
          videoListContainer.style.display = "block";
          expandCollapseButton.textContent = "Collapse";
        } else {
          videoListContainer.style.display = "none";
          expandCollapseButton.textContent = "Expand All";
        }
      });
    });
  </script>
</div>
