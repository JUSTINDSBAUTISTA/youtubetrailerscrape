<div class="container">
  <h1>YouTube Trailer Scraper</h1>

  <!-- Form for uploading CSV -->
  <%= form_with url: fetch_youtube_trailers_path, method: :post, multipart: true, class: "form-container" do |form| %>
    <div class="form-group">
      <%= form.label :file, "Upload CSV file", class: "form-label" %>
      <%= form.file_field :file, class: "form-input", required: true %>
    </div>
    <div class="form-actions">
      <%= form.submit "Scrape YouTube Data", class: "submit-btn", id: "scrape-button" %>
    </div>
  <% end %>

  <!-- Progress bar for scraping process -->
  <div class="progress-bar-container" id="progress-bar-container" style="display: none; margin-top: 20px;">
    <div class="progress-bar" id="progress-bar" style="width: 0%; background-color: #4caf50; color: white; text-align: center; padding: 5px 0;">
      0%
    </div>
  </div>

  <!-- Status message -->
  <div id="status-message" style="margin-top: 10px; font-weight: bold; color: #333;"></div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const scrapeButton = document.getElementById("scrape-button");
      const progressBarContainer = document.getElementById("progress-bar-container");
      const progressBar = document.getElementById("progress-bar");
      const statusMessage = document.getElementById("status-message");

      scrapeButton.addEventListener("click", function(event) {
        event.preventDefault(); // Prevent default form submission for real-time progress tracking

        // Reset progress bar and status message
        progressBarContainer.style.display = "block";
        progressBar.style.width = "0%";
        progressBar.textContent = "0%";
        statusMessage.textContent = "Starting the scraping process...";

        // Start progress tracking
        fetchProgress();

        // Submit the form
        document.querySelector("form").submit();
      });

      function fetchProgress() {
        fetch("<%= progress_youtube_trailers_path %>")
          .then(response => {
            if (!response.ok) throw new Error("Failed to fetch progress.");
            return response.json();
          })
          .then(data => {
            const current = data.current || 0;
            const total = data.total || 1;
            const percentage = Math.floor((current / total) * 100);

            // Update progress bar
            progressBar.style.width = `${percentage}%`;
            progressBar.textContent = `${percentage}%`;

            // Update status message with the current log
            const currentLog = data.current_log || "Processing...";
            statusMessage.textContent = `Progress: ${current}/${total}. ${currentLog}`;

            if (percentage < 100) {
              // Keep checking progress until completed
              setTimeout(fetchProgress, 1000);
            } else {
              statusMessage.textContent = "Scraping completed successfully! Preparing your download zip file...";
            }
          })
          .catch(error => {
            console.error("Error fetching progress:", error);
            statusMessage.textContent = "Error tracking progress. Retrying...";
            setTimeout(fetchProgress, 2000); // Retry fetching progress
          });
      }
    });
  </script>
</div>
