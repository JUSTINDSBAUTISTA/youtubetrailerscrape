<div id="main-content">
  <div class="container">
    <h1>YouTube Trailer Scraper</h1>

    <!-- Form for uploading CSV -->
    <%= form_with url: fetch_youtube_trailers_path, method: :post, multipart: true, class: "form-container", id: "scrape-form" do |form| %>
      <div class="form-group">
        <%= form.label :file, "Upload CSV file", class: "form-label" %>
        <%= form.file_field :file, class: "form-input", required: true %>
      </div>
      <div class="form-actions" id="form-actions">
        <%= form.submit "Start Scraping", class: "submit-btn", id: "scrape-button" %>
      </div>
    <% end %>

    <!-- Timer display -->
    <div class="grid-container">
      <div class="grid-item">
        <div id="timer-container" class="timer-container">
              <h3>Elapsed Time: <span id="timer-display" class="timer-display">00:00:00</span></h3>
        </div>
      </div>

      <div class="grid-item">
        <div id="remaining-time-container" class="timer-container">
              <h3>Approximate Time Remaining: <span id="remaining-time-display" class="timer-display">--:--:--</span></h3>
        </div>
      </div>
    </div>

    <!-- Progress bar for scraping process -->
    <div class="progress-bar-container" id="progress-bar-container">
      <div class="progress-bar" id="progress-bar">0%</div>
    </div>

    <!-- Status message -->
    <div id="status-message" class="status-message" style="opacity: 0.5;"></div>

    <!-- Tables in a single row -->
  </div>
</div>

<div class="table-container">
  <!-- Successfully Scraped Table -->
  <div class="table-wrapper">
    <h3>Successfully Scraped</h3>
    <table id="successful-table">
      <thead>
        <tr>
          <th style="background-color: #4caf50;"};>ID Tag</th>
          <th style="background-color: #4caf50;"};>YouTube Link</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- Unsuccessfully Scraped Table -->
  <div class="table-wrapper">
    <h3>Unsuccessfully Scraped</h3>
    <table id="unsuccessful-table">
      <thead>
        <tr>
          <th style="background-color: grey;">ID Tag</th>
          <th style="background-color: grey;">YouTube Link</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- Invalid Links Table -->
  <div class="table-wrapper">
    <h3>Invalid Links</h3>
    <table id="invalid-table">
      <thead>
        <tr>
          <th style="background-color: red;">ID Tag</th>
          <th style="background-color: red;">YouTube Link</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</div>

<!-- Modal for ZIP download confirmation -->
<div id="download-modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
  <p>Scraping is complete. Would you like to download the ZIP file?</p>
  <button id="confirm-download" style="background-color: #4caf50; color: white; padding: 10px 20px; border: none; cursor: pointer; margin-right: 10px;">Download</button>
  <button id="cancel-download" style="background-color: #f44336; color: white; padding: 10px 20px; border: none; cursor: pointer;">Cancel</button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const scrapeForm = document.getElementById("scrape-form");
    const scrapeButton = document.getElementById("scrape-button");
    const progressBarContainer = document.getElementById("progress-bar-container");
    const progressBar = document.getElementById("progress-bar");
    const statusMessage = document.getElementById("status-message");
    const downloadModal = document.getElementById("download-modal");
    const confirmDownload = document.getElementById("confirm-download");
    const cancelDownload = document.getElementById("cancel-download");
    const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
    const successfulTable = document.getElementById("successful-table")?.querySelector("tbody");
    const unsuccessfulTable = document.getElementById("unsuccessful-table")?.querySelector("tbody");
    const invalidTable = document.getElementById("invalid-table")?.querySelector("tbody");
    const timerDisplay = document.getElementById("timer-display");


    // Timer variables
    let timerInterval = null;
    let elapsedSeconds = 0;

    // Format elapsed time as HH:MM:SS
    function formatTime(seconds) {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const secs = seconds % 60;
      return `${hours.toString().padStart(2, "0")}:${minutes
        .toString()
        .padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
    }

    // Start the timer
    function startTimer() {
      if (timerInterval) return; // Prevent multiple intervals
      timerInterval = setInterval(() => {
        elapsedSeconds++;
        timerDisplay.textContent = formatTime(elapsedSeconds);
      }, 1000);
    }

    // Reset the timer
    function resetTimer() {
      clearInterval(timerInterval);
      elapsedSeconds = 0;
      timerDisplay.textContent = "00:00:00";
    }

    // Freeze the timer
    function freezeTimer() {
      if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null; // Prevent accidental restarts
      }
    }

    scrapeButton.addEventListener("click", function (event) {
      // Ensure the file input is checked before proceeding
      if (!scrapeForm.file.value) {
        alert("Please select a file to upload.");
        event.preventDefault(); // Prevent submission if no file is selected
        return;
      }

      // Prevent default form behavior
      event.preventDefault();

      // Start the timer
      startTimer();

      // Reset progress bar and status message
      progressBarContainer.style.display = "block";
      progressBar.style.width = "0%";
      progressBar.textContent = "0%";
      statusMessage.textContent = "Starting the scraping process...";

      // Start progress tracking
      fetchProgress();

      // Manually submit the form
      scrapeForm.submit();
    });
        
    function fetchProgress() {
      fetch("<%= progress_youtube_trailers_path %>")
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch progress.");
          return response.json();
        })
        .then((data) => {
          const current = data.current || 0;
          const total = data.total || 1;
          const percentage = Math.floor((current / total) * 100);

          // Update progress bar
          progressBar.style.width = `${percentage}%`;
          progressBar.textContent = `${percentage}%`;

          // Update status message
          const currentLog = data.current_log || "Processing...";
          const zipReady = data.zip_ready || false;

          statusMessage.textContent = `Progress: ${current}/${total}. ${currentLog}`;

          console.log("Updating tables with response data:", data);

          // Populate tables with filtered data
          if (successfulTable && data.successful_details) {
            populateTable(successfulTable, data.successful_details, "successful");
          }

          if (unsuccessfulTable && data.unsuccessful_details) {
            populateTable(unsuccessfulTable, data.unsuccessful_details, "unsuccessful");
          }

          if (invalidTable && data.invalid_details) {
            populateTable(invalidTable, data.invalid_details, "invalid");
          }

          // Display approximate remaining time from the backend
          if (data.remaining_time) {
            const { hours, minutes, seconds } = data.remaining_time;
            document.getElementById("remaining-time-display").textContent = `${hours
              .toString()
              .padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
          } else {
            document.getElementById("remaining-time-display").textContent = "--:--:--";
          }

          // Show modal when ZIP is ready
          if (zipReady && percentage === 100 && downloadModal.style.display === "none") {
            showDownloadModal();
            freezeTimer();
            document.getElementById("remaining-time-display").textContent = "00:00:00"; // Set remaining time to zero
          }

          // Continue polling if not complete
          if (percentage < 100 && !data.stopped) {
            setTimeout(fetchProgress, 1000);
          } else if (!zipReady) {
            resetTimer();
            statusMessage.textContent = "Scraping completed but waiting for ZIP to be ready...";
            setTimeout(fetchProgress, 1000); // Keep polling for ZIP readiness
          }
        })
        .catch((error) => {
          console.error("Error fetching progress:", error);
          statusMessage.textContent = "Error tracking progress. Retrying...";
          setTimeout(fetchProgress, 2000); // Retry fetching progress
        });
    }

    // Format time as HH:MM:SS
    function formatTime(seconds) {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const secs = seconds % 60;
      return `${hours.toString().padStart(2, "0")}:${minutes
        .toString()
        .padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
    }


    // State to track successfully added idTags
    const successfulIdTags = new Set();

    function populateTable(table, data, tableType = "") {
      console.log(`Populating table (${tableType}) with data:`, data);

      if (tableType === "successful") {
        // Track successful idTags
        data.forEach((row) => successfulIdTags.add(row.idTag));
      }

      // Clear table to prevent duplication
      table.innerHTML = "";

      // Add new rows based on filtered data
      data.forEach((row) => {
        // Skip rendering unsuccessful rows that exist in successfulIdTags
        if (tableType === "unsuccessful" && successfulIdTags.has(row.idTag)) {
          console.log(`Skipping unsuccessful row with idTag=${row.idTag} (already in successful)`);
          return; // Skip this row
        }

        const tr = document.createElement("tr");
        const idTagTd = document.createElement("td");
        const linkTd = document.createElement("td");

        idTagTd.textContent = row.idTag;
        linkTd.innerHTML = `<a href="${row.YoutubeLink}" target="_blank">${row.YoutubeLink}</a>`;

        tr.appendChild(idTagTd);
        tr.appendChild(linkTd);
        table.appendChild(tr);

        console.log(`Added row to ${tableType} table:`, row);
      });
    }


    function removeMatchingRow(table, idTag, link) {
      const rows = Array.from(table.querySelectorAll("tr"));
      rows.forEach((tr, index) => {
        const idTagCell = tr.cells[0]?.textContent.trim();
        const linkCell = tr.cells[1]?.textContent.trim();
        if (idTagCell === idTag && linkCell === link) {
          console.log(`Removing row with idTag=${idTag} and link=${link}`);
          tr.remove();
        }
      });
    }



    function showDownloadModal() {
      const mainContent = document.getElementById("main-content");

      downloadModal.style.display = "block"; // Display modal
      mainContent.classList.add("blur-background"); // Add blur effect

      // Confirm download button
      confirmDownload.onclick = function () {
        downloadModal.style.display = "none";
        mainContent.classList.remove("blur-background");
        statusMessage.textContent = "Downloading ZIP file...";
        window.location.href = "<%= download_zip_youtube_trailers_path(zip_name: "#{Date.today.strftime('%Y-%m-%d')}-Batch/youtube_trailers_data.zip") %>";
      };

      // Cancel download button
      cancelDownload.onclick = function () {
        downloadModal.style.display = "none";
        statusMessage.textContent = "Cancelled download.";
        mainContent.classList.remove("blur-background");
      };
    }
  });
</script>
